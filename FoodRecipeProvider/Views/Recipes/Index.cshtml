@using Microsoft.AspNetCore.Identity
@inject SignInManager<AppUser> SignInManager
@model SearchQueryModel

@{
    ViewData["Title"] = "Search Recipes";
}
<style>
    
</style>
<h1>Search Recipes</h1>

<form method="get" action="/Recipes/Index" class="mb-4">
    <div class="form-group">
        <label class="sr-only" for="query">Search Recipe</label>
        <input type="text" class="form-control" placeholder="Enter recipe name" name="keyword" required id="keyword" />
    </div>

    <div class="card mb-3">
        <div class="card-header" id="dietLabelsToggle" data-toggle="collapse" data-target="#dietLabelsPanel" aria-expanded="false" aria-controls="dietLabelsPanel">
            Diet Labels
        </div>
        <div id="dietLabelsPanel" class="collapse">
            <div class="card-body">
                @foreach (var dietLabel in Model.AvailableDietLabels)
                {
                    <div class="form-check checkbox-element">
                        <input class="form-check-input hidden" type="checkbox" name="DietLabels" value="@dietLabel" id="@("dietLabel_" + @dietLabel)">
                        <label class="form-check-label" for="@("dietLabel_" + @dietLabel)">
                            @dietLabel
                        </label>
                    </div>
                }
            </div>
        </div>


        <div class="card-header" id="healthLabelsToggle" data-toggle="collapse" data-target="#healthLabelsPanel" aria-expanded="false" aria-controls="healthLabelsPanel">
            Health Labels
            
        </div>
        <div id="healthLabelsPanel" class="collapse">
            <div class="card-body">
                @foreach (var healthLabel in Model.AvailableHealthLabels)
                {
                    <div class="form-check checkbox-element">
                        <input class="form-check-input " type="checkbox" name="healthLabels" value="@healthLabel" id="@("healthLabel_" + @healthLabel)">
                        <label class="form-check-label" for="@("healthLabel_" + @healthLabel)">
                            @healthLabel
                        </label>
                    </div>
                }
            </div>
        </div>


        <div class="card-header" id="dishTypesToggle" data-toggle="collapse" data-target="#dishTypesPanel" aria-expanded="false" aria-controls="dishTypesPanel">
            Dish Types
        </div>
        <div id="dishTypesPanel" class="collapse">
            <div class="card-body">
                @foreach (var dishType in Model.AvailableDishTypes)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="dishType" id="@("dishType_" + @dishType)" value="@dishType">
                        <label class="form-check-label" for="@("dishType_" + @dishType)">
                            @dishType
                        </label>
                    </div>
                }
            </div>
        </div>
    


    <div class="card-header" id="mealTypesToggle" data-toggle="collapse" data-target="#mealTypesPanel" aria-expanded="false" aria-controls="mealTypesPanel">
        Meal Types
    </div>
    <div id="mealTypesPanel" class="collapse">
        <div class="card-body">
            @foreach (var mealType in Model.AvailableMealTypes)
            {
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="mealType" id="@("mealType_" + @mealType)" value="@mealType">
                    <label class="form-check-label" for="@("mealType_" + @mealType)">
                        @mealType
                    </label>
                </div>
            }
        </div>
    </div>
    


    <div class="card-header" id="cuisineTypesToggle" data-toggle="collapse" data-target="#cuisineTypesPanel" aria-expanded="false" aria-controls="cuisineTypesPanel">
        Cuisine Types
    </div>
    <div id="cuisineTypesPanel" class="collapse">
        <div class="card-body">
            @foreach (var cuisineType in Model.AvailableCuisineTypes)
            {
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="cuisineType" id="@("cuisineType_" + @cuisineType)" value="@cuisineType">
                    <label class="form-check-label" for="@("cuisineType_" + @cuisineType)">
                        @cuisineType
                    </label>
                </div>
            }
        </div>
    </div>
    </div>

    <div class="input-group-append">
        <button class="btn btn-primary" type="submit">Search</button>
    </div>
</form>


@if (Model.SearchByQueryResponse != null && Model.SearchByQueryResponse.hits != null && Model.SearchByQueryResponse.hits.Any())
{
    <div>
        <h6>Count: @Model.SearchByQueryResponse.count</h6>
    </div>
    @if (Model.SearchByUrisResponse != null && SignInManager.IsSignedIn(User))
    {
    <h5>Recommended recipes:</h5>
    <ul class="recipe-list">
        @foreach (var recipe in Model.SearchByUrisResponse.hits.Skip((Model.CurrentPage - 1) * 12).Take(12))
        {
            <li class="recipe-item">
                <div class="recipe-image">
                    <img src="@recipe.recipe.image" alt="Recipe Image">
                </div>
                <div class="recipe-info">
                    <h5 class="recipe-title">@recipe.recipe.label</h5>
                    <a href="@Url.Action("RecipeDetails", new { recipeUri = recipe.recipe.uri })" class="btn btn-primary recipe-button">View Recipe</a>
                </div>
            </li>
        }
    </ul>
    }
    <h5>Searched recipes:</h5>
    <ul class="recipe-list">
        @foreach (var recipe in Model.SearchByQueryResponse.hits.Skip((Model.CurrentPage - 1) * 12).Take(12))
        {
            <li class="recipe-item">
                <div class="recipe-image">
                    <img src="@recipe.recipe.image" alt="Recipe Image">
                </div>
                <div class="recipe-info">
                    <h5 class="recipe-title">@recipe.recipe.label</h5>
                    <p class="recipe-ingredient">@Html.Raw(recipe.recipe.ingredientLines[0])</p>
                    <a href="@Url.Action("RecipeDetails", new { recipeUri = recipe.recipe.uri })" class="btn btn-primary recipe-button">View Recipe</a>
                </div>
            </li>
        }
    </ul>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @if (Model.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { keyword = Model.SearchTags.keyword, dietLabels = string.Join(",", Model.SearchTags.dietLabels), healthLabels = string.Join(",", Model.SearchTags.healthLabels), cuisineType = Model.SearchTags.cuisineType, dishType = Model.SearchTags.dishType, mealType = Model.SearchTags.mealType, page = Model.CurrentPage - 1, availableDietLabels = string.Join(",", Model.AvailableDietLabels), availableHealthLabels = string.Join(",", Model.AvailableHealthLabels), availableDishTypes = string.Join(",", Model.AvailableDishTypes), availableCuisineTypes = string.Join(",", Model.AvailableCuisineTypes), availableMealTypes = string.Join(",", Model.AvailableMealTypes) })" tabindex="-1">Previous</a>
                </li>
            }

            @for (int i = 1; i <= Model.PageCount; i++)
            {
                <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", new { keyword = Model.SearchTags.keyword, dietLabels = string.Join(",", Model.SearchTags.dietLabels), healthLabels = string.Join(",", Model.SearchTags.healthLabels), cuisineType = Model.SearchTags.cuisineType, dishType = Model.SearchTags.dishType, mealType = Model.SearchTags.mealType, page = i, availableDietLabels = string.Join(",", Model.AvailableDietLabels), availableHealthLabels = string.Join(",", Model.AvailableHealthLabels), availableDishTypes = string.Join(",", Model.AvailableDishTypes), availableCuisineTypes = string.Join(",", Model.AvailableCuisineTypes), availableMealTypes = string.Join(",", Model.AvailableMealTypes) })">@i</a>
                </li>
            }

            @if (Model.CurrentPage < Model.PageCount)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { keyword = Model.SearchTags.keyword, dietLabels = string.Join(",", Model.SearchTags.dietLabels), healthLabels = string.Join(",", Model.SearchTags.healthLabels), cuisineType = Model.SearchTags.cuisineType, dishType = Model.SearchTags.dishType, mealType = Model.SearchTags.mealType, page = Model.CurrentPage + 1, availableDietLabels = string.Join(",", Model.AvailableDietLabels), availableHealthLabels = string.Join(",", Model.AvailableHealthLabels), availableDishTypes = string.Join(",", Model.AvailableDishTypes), availableCuisineTypes = string.Join(",", Model.AvailableCuisineTypes), availableMealTypes = string.Join(",", Model.AvailableMealTypes) })">Next</a>
                </li>
            }
        </ul>
    </nav>
}
else
{
    <p>No recipes found.</p>
}


<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js" integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV" crossorigin="anonymous"></script>
